upstream upstream_oauth_server {
    server 127.0.0.1:{{ oauth_private_port }};
}

upstream upstream_oauth_internal_server {
    server 127.0.0.1:{{ oauth_internal_private_port }};
}

# pull in upstream_oauth_console_server
include /etc/nginx/conf.d/oauth_console/upstream/*.conf;

server {
  listen 1443;
  server_name {{ oauth_domain_name }};

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://upstream_oauth_server;
  }

  #
  # Internal server implements these routes:
  #
  # GET /v1/clients
  # POST /v1/client
  # POST /v1/client/{client_id}
  # DELETE /v1/client/{client_id}
  #
  # However, `GET /client` must be routed to the regular
  # oauth server. So, exactly match `GET /v1/clients` and
  # condition the proxy_pass on the `/v1/client` method.
  #

  location = /v1/clients {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    rewrite ^(.*)$ $1 break;
    proxy_pass http://upstream_oauth_internal_server;
  }

  location /v1/client {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    rewrite ^(.*)$ $1 break;
    proxy_pass http://upstream_oauth_internal_server;
    limit_except PUT POST DELETE {
      proxy_pass http://upstream_oauth_server;
    }
  }

  # pull in location /console
  include /etc/nginx/conf.d/oauth_console/location/*.conf;
}
